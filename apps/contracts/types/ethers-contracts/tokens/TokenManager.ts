/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  

  export interface TokenManagerInterface extends Interface {
    getFunction(nameOrSignature: "approvePublic" | "associateTokenPublic" | "burnSomeTokens" | "createToken" | "dissociate" | "isAssociated" | "mintMoreTokens" | "mintTokenPublic" | "mintTokenToAddressPublic" | "redirectForToken" | "tokenAddress" | "transferFrom" | "transferFromNFT" | "withdrawHBAR"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "CallResponseEvent" | "CreatedToken" | "HBARFallback" | "HBARReceived" | "HBARWithdrawn" | "IsAssociated" | "KycGranted" | "MintedToken" | "ResponseCode" | "TransferToken"): EventFragment;

    encodeFunctionData(functionFragment: 'approvePublic', values: [AddressLike, AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'associateTokenPublic', values: [AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'burnSomeTokens', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'createToken', values?: undefined): string;
encodeFunctionData(functionFragment: 'dissociate', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'isAssociated', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'mintMoreTokens', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'mintTokenPublic', values: [AddressLike, BigNumberish, BytesLike[]]): string;
encodeFunctionData(functionFragment: 'mintTokenToAddressPublic', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'redirectForToken', values: [AddressLike, BytesLike]): string;
encodeFunctionData(functionFragment: 'tokenAddress', values?: undefined): string;
encodeFunctionData(functionFragment: 'transferFrom', values: [AddressLike, AddressLike, AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'transferFromNFT', values: [AddressLike, AddressLike, AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'withdrawHBAR', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'approvePublic', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'associateTokenPublic', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'burnSomeTokens', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'createToken', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'dissociate', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isAssociated', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'mintMoreTokens', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'mintTokenPublic', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'mintTokenToAddressPublic', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'redirectForToken', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'tokenAddress', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferFromNFT', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdrawHBAR', data: BytesLike): Result;
  }

  
    export namespace CallResponseEventEvent {
      export type InputTuple = [arg0: boolean, arg1: BytesLike];
      export type OutputTuple = [arg0: boolean, arg1: string];
      export interface OutputObject {arg0: boolean, arg1: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace CreatedTokenEvent {
      export type InputTuple = [tokenAddress: AddressLike];
      export type OutputTuple = [tokenAddress: string];
      export interface OutputObject {tokenAddress: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace HBARFallbackEvent {
      export type InputTuple = [sender: AddressLike, amount: BigNumberish, data: BytesLike];
      export type OutputTuple = [sender: string, amount: bigint, data: string];
      export interface OutputObject {sender: string, amount: bigint, data: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace HBARReceivedEvent {
      export type InputTuple = [from: AddressLike, amount: BigNumberish];
      export type OutputTuple = [from: string, amount: bigint];
      export interface OutputObject {from: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace HBARWithdrawnEvent {
      export type InputTuple = [to: AddressLike, amount: BigNumberish];
      export type OutputTuple = [to: string, amount: bigint];
      export interface OutputObject {to: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace IsAssociatedEvent {
      export type InputTuple = [status: boolean];
      export type OutputTuple = [status: boolean];
      export interface OutputObject {status: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace KycGrantedEvent {
      export type InputTuple = [kycGranted: boolean];
      export type OutputTuple = [kycGranted: boolean];
      export interface OutputObject {kycGranted: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace MintedTokenEvent {
      export type InputTuple = [newTotalSupply: BigNumberish, serialNumbers: BigNumberish[]];
      export type OutputTuple = [newTotalSupply: bigint, serialNumbers: bigint[]];
      export interface OutputObject {newTotalSupply: bigint, serialNumbers: bigint[] };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ResponseCodeEvent {
      export type InputTuple = [responseCode: BigNumberish];
      export type OutputTuple = [responseCode: bigint];
      export interface OutputObject {responseCode: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TransferTokenEvent {
      export type InputTuple = [tokenAddress: AddressLike, receiver: AddressLike, amount: BigNumberish];
      export type OutputTuple = [tokenAddress: string, receiver: string, amount: bigint];
      export interface OutputObject {tokenAddress: string, receiver: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface TokenManager extends BaseContract {
    
    connect(runner?: ContractRunner | null): TokenManager;
    waitForDeployment(): Promise<this>;

    interface: TokenManagerInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    approvePublic: TypedContractMethod<
      [token: AddressLike, spender: AddressLike, amount: BigNumberish, ],
      [bigint],
      'nonpayable'
    >
    

    
    associateTokenPublic: TypedContractMethod<
      [account: AddressLike, token: AddressLike, ],
      [bigint],
      'nonpayable'
    >
    

    
    burnSomeTokens: TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    createToken: TypedContractMethod<
      [],
      [void],
      'payable'
    >
    

    
    dissociate: TypedContractMethod<
      [token: AddressLike, ],
      [bigint],
      'nonpayable'
    >
    

    
    isAssociated: TypedContractMethod<
      [token: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    mintMoreTokens: TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    mintTokenPublic: TypedContractMethod<
      [token: AddressLike, amount: BigNumberish, metadata: BytesLike[], ],
      [[bigint, bigint, bigint[]] & {responseCode: bigint, newTotalSupply: bigint, serialNumbers: bigint[] }],
      'nonpayable'
    >
    

    
    mintTokenToAddressPublic: TypedContractMethod<
      [receiver: AddressLike, amount: BigNumberish, ],
      [[bigint, bigint, bigint[]] & {responseCode: bigint, newTotalSupply: bigint, serialNumbers: bigint[] }],
      'nonpayable'
    >
    

    
    redirectForToken: TypedContractMethod<
      [token: AddressLike, encodedFunctionSelector: BytesLike, ],
      [[bigint, string] & {responseCode: bigint, response: string }],
      'nonpayable'
    >
    

    
    tokenAddress: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    transferFrom: TypedContractMethod<
      [token: AddressLike, from: AddressLike, to: AddressLike, amount: BigNumberish, ],
      [bigint],
      'nonpayable'
    >
    

    
    transferFromNFT: TypedContractMethod<
      [token: AddressLike, from: AddressLike, to: AddressLike, serialNumber: BigNumberish, ],
      [bigint],
      'nonpayable'
    >
    

    
    withdrawHBAR: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'approvePublic'): TypedContractMethod<
      [token: AddressLike, spender: AddressLike, amount: BigNumberish, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'associateTokenPublic'): TypedContractMethod<
      [account: AddressLike, token: AddressLike, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'burnSomeTokens'): TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'createToken'): TypedContractMethod<
      [],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'dissociate'): TypedContractMethod<
      [token: AddressLike, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'isAssociated'): TypedContractMethod<
      [token: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'mintMoreTokens'): TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'mintTokenPublic'): TypedContractMethod<
      [token: AddressLike, amount: BigNumberish, metadata: BytesLike[], ],
      [[bigint, bigint, bigint[]] & {responseCode: bigint, newTotalSupply: bigint, serialNumbers: bigint[] }],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'mintTokenToAddressPublic'): TypedContractMethod<
      [receiver: AddressLike, amount: BigNumberish, ],
      [[bigint, bigint, bigint[]] & {responseCode: bigint, newTotalSupply: bigint, serialNumbers: bigint[] }],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'redirectForToken'): TypedContractMethod<
      [token: AddressLike, encodedFunctionSelector: BytesLike, ],
      [[bigint, string] & {responseCode: bigint, response: string }],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'tokenAddress'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'transferFrom'): TypedContractMethod<
      [token: AddressLike, from: AddressLike, to: AddressLike, amount: BigNumberish, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferFromNFT'): TypedContractMethod<
      [token: AddressLike, from: AddressLike, to: AddressLike, serialNumber: BigNumberish, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'withdrawHBAR'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'CallResponseEvent'): TypedContractEvent<CallResponseEventEvent.InputTuple, CallResponseEventEvent.OutputTuple, CallResponseEventEvent.OutputObject>;
getEvent(key: 'CreatedToken'): TypedContractEvent<CreatedTokenEvent.InputTuple, CreatedTokenEvent.OutputTuple, CreatedTokenEvent.OutputObject>;
getEvent(key: 'HBARFallback'): TypedContractEvent<HBARFallbackEvent.InputTuple, HBARFallbackEvent.OutputTuple, HBARFallbackEvent.OutputObject>;
getEvent(key: 'HBARReceived'): TypedContractEvent<HBARReceivedEvent.InputTuple, HBARReceivedEvent.OutputTuple, HBARReceivedEvent.OutputObject>;
getEvent(key: 'HBARWithdrawn'): TypedContractEvent<HBARWithdrawnEvent.InputTuple, HBARWithdrawnEvent.OutputTuple, HBARWithdrawnEvent.OutputObject>;
getEvent(key: 'IsAssociated'): TypedContractEvent<IsAssociatedEvent.InputTuple, IsAssociatedEvent.OutputTuple, IsAssociatedEvent.OutputObject>;
getEvent(key: 'KycGranted'): TypedContractEvent<KycGrantedEvent.InputTuple, KycGrantedEvent.OutputTuple, KycGrantedEvent.OutputObject>;
getEvent(key: 'MintedToken'): TypedContractEvent<MintedTokenEvent.InputTuple, MintedTokenEvent.OutputTuple, MintedTokenEvent.OutputObject>;
getEvent(key: 'ResponseCode'): TypedContractEvent<ResponseCodeEvent.InputTuple, ResponseCodeEvent.OutputTuple, ResponseCodeEvent.OutputObject>;
getEvent(key: 'TransferToken'): TypedContractEvent<TransferTokenEvent.InputTuple, TransferTokenEvent.OutputTuple, TransferTokenEvent.OutputObject>;

    filters: {
      
      'CallResponseEvent(bool,bytes)': TypedContractEvent<CallResponseEventEvent.InputTuple, CallResponseEventEvent.OutputTuple, CallResponseEventEvent.OutputObject>;
      CallResponseEvent: TypedContractEvent<CallResponseEventEvent.InputTuple, CallResponseEventEvent.OutputTuple, CallResponseEventEvent.OutputObject>;
    

      'CreatedToken(address)': TypedContractEvent<CreatedTokenEvent.InputTuple, CreatedTokenEvent.OutputTuple, CreatedTokenEvent.OutputObject>;
      CreatedToken: TypedContractEvent<CreatedTokenEvent.InputTuple, CreatedTokenEvent.OutputTuple, CreatedTokenEvent.OutputObject>;
    

      'HBARFallback(address,uint256,bytes)': TypedContractEvent<HBARFallbackEvent.InputTuple, HBARFallbackEvent.OutputTuple, HBARFallbackEvent.OutputObject>;
      HBARFallback: TypedContractEvent<HBARFallbackEvent.InputTuple, HBARFallbackEvent.OutputTuple, HBARFallbackEvent.OutputObject>;
    

      'HBARReceived(address,uint256)': TypedContractEvent<HBARReceivedEvent.InputTuple, HBARReceivedEvent.OutputTuple, HBARReceivedEvent.OutputObject>;
      HBARReceived: TypedContractEvent<HBARReceivedEvent.InputTuple, HBARReceivedEvent.OutputTuple, HBARReceivedEvent.OutputObject>;
    

      'HBARWithdrawn(address,uint256)': TypedContractEvent<HBARWithdrawnEvent.InputTuple, HBARWithdrawnEvent.OutputTuple, HBARWithdrawnEvent.OutputObject>;
      HBARWithdrawn: TypedContractEvent<HBARWithdrawnEvent.InputTuple, HBARWithdrawnEvent.OutputTuple, HBARWithdrawnEvent.OutputObject>;
    

      'IsAssociated(bool)': TypedContractEvent<IsAssociatedEvent.InputTuple, IsAssociatedEvent.OutputTuple, IsAssociatedEvent.OutputObject>;
      IsAssociated: TypedContractEvent<IsAssociatedEvent.InputTuple, IsAssociatedEvent.OutputTuple, IsAssociatedEvent.OutputObject>;
    

      'KycGranted(bool)': TypedContractEvent<KycGrantedEvent.InputTuple, KycGrantedEvent.OutputTuple, KycGrantedEvent.OutputObject>;
      KycGranted: TypedContractEvent<KycGrantedEvent.InputTuple, KycGrantedEvent.OutputTuple, KycGrantedEvent.OutputObject>;
    

      'MintedToken(int64,int64[])': TypedContractEvent<MintedTokenEvent.InputTuple, MintedTokenEvent.OutputTuple, MintedTokenEvent.OutputObject>;
      MintedToken: TypedContractEvent<MintedTokenEvent.InputTuple, MintedTokenEvent.OutputTuple, MintedTokenEvent.OutputObject>;
    

      'ResponseCode(int256)': TypedContractEvent<ResponseCodeEvent.InputTuple, ResponseCodeEvent.OutputTuple, ResponseCodeEvent.OutputObject>;
      ResponseCode: TypedContractEvent<ResponseCodeEvent.InputTuple, ResponseCodeEvent.OutputTuple, ResponseCodeEvent.OutputObject>;
    

      'TransferToken(address,address,int64)': TypedContractEvent<TransferTokenEvent.InputTuple, TransferTokenEvent.OutputTuple, TransferTokenEvent.OutputObject>;
      TransferToken: TypedContractEvent<TransferTokenEvent.InputTuple, TransferTokenEvent.OutputTuple, TransferTokenEvent.OutputObject>;
    
    };
  }