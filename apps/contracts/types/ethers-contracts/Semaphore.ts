/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  
export declare namespace ISemaphore {
      
    export type SemaphoreProofStruct = {merkleTreeDepth: BigNumberish, merkleTreeRoot: BigNumberish, nullifier: BigNumberish, message: BigNumberish, scope: BigNumberish, points: BigNumberish[]}

    export type SemaphoreProofStructOutput = [merkleTreeDepth: bigint, merkleTreeRoot: bigint, nullifier: bigint, message: bigint, scope: bigint, points: bigint[]] & {merkleTreeDepth: bigint, merkleTreeRoot: bigint, nullifier: bigint, message: bigint, scope: bigint, points: bigint[] }
  
    }

  export interface SemaphoreInterface extends Interface {
    getFunction(nameOrSignature: "acceptGroupAdmin" | "addMember" | "addMembers" | "createGroup(address,uint256)" | "createGroup()" | "createGroup(address)" | "getGroupAdmin" | "getMerkleTreeDepth" | "getMerkleTreeRoot" | "getMerkleTreeSize" | "groupCounter" | "groups" | "hasMember" | "indexOf" | "removeMember" | "updateGroupAdmin" | "updateGroupMerkleTreeDuration" | "updateMember" | "validateProof" | "verifier" | "verifyProof"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "GroupAdminPending" | "GroupAdminUpdated" | "GroupCreated" | "GroupMerkleTreeDurationUpdated" | "MemberAdded" | "MemberRemoved" | "MemberUpdated" | "MembersAdded" | "ProofValidated"): EventFragment;

    encodeFunctionData(functionFragment: 'acceptGroupAdmin', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'addMember', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'addMembers', values: [BigNumberish, BigNumberish[]]): string;
encodeFunctionData(functionFragment: 'createGroup(address,uint256)', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'createGroup()', values?: undefined): string;
encodeFunctionData(functionFragment: 'createGroup(address)', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getGroupAdmin', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getMerkleTreeDepth', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getMerkleTreeRoot', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getMerkleTreeSize', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'groupCounter', values?: undefined): string;
encodeFunctionData(functionFragment: 'groups', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'hasMember', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'indexOf', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'removeMember', values: [BigNumberish, BigNumberish, BigNumberish[]]): string;
encodeFunctionData(functionFragment: 'updateGroupAdmin', values: [BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'updateGroupMerkleTreeDuration', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'updateMember', values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish[]]): string;
encodeFunctionData(functionFragment: 'validateProof', values: [BigNumberish, ISemaphore.SemaphoreProofStruct]): string;
encodeFunctionData(functionFragment: 'verifier', values?: undefined): string;
encodeFunctionData(functionFragment: 'verifyProof', values: [BigNumberish, ISemaphore.SemaphoreProofStruct]): string;

    decodeFunctionResult(functionFragment: 'acceptGroupAdmin', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'addMember', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'addMembers', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'createGroup(address,uint256)', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'createGroup()', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'createGroup(address)', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getGroupAdmin', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getMerkleTreeDepth', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getMerkleTreeRoot', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getMerkleTreeSize', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'groupCounter', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'groups', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'hasMember', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'indexOf', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'removeMember', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'updateGroupAdmin', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'updateGroupMerkleTreeDuration', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'updateMember', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'validateProof', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'verifier', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'verifyProof', data: BytesLike): Result;
  }

  
    export namespace GroupAdminPendingEvent {
      export type InputTuple = [groupId: BigNumberish, oldAdmin: AddressLike, newAdmin: AddressLike];
      export type OutputTuple = [groupId: bigint, oldAdmin: string, newAdmin: string];
      export interface OutputObject {groupId: bigint, oldAdmin: string, newAdmin: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace GroupAdminUpdatedEvent {
      export type InputTuple = [groupId: BigNumberish, oldAdmin: AddressLike, newAdmin: AddressLike];
      export type OutputTuple = [groupId: bigint, oldAdmin: string, newAdmin: string];
      export interface OutputObject {groupId: bigint, oldAdmin: string, newAdmin: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace GroupCreatedEvent {
      export type InputTuple = [groupId: BigNumberish];
      export type OutputTuple = [groupId: bigint];
      export interface OutputObject {groupId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace GroupMerkleTreeDurationUpdatedEvent {
      export type InputTuple = [groupId: BigNumberish, oldMerkleTreeDuration: BigNumberish, newMerkleTreeDuration: BigNumberish];
      export type OutputTuple = [groupId: bigint, oldMerkleTreeDuration: bigint, newMerkleTreeDuration: bigint];
      export interface OutputObject {groupId: bigint, oldMerkleTreeDuration: bigint, newMerkleTreeDuration: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace MemberAddedEvent {
      export type InputTuple = [groupId: BigNumberish, index: BigNumberish, identityCommitment: BigNumberish, merkleTreeRoot: BigNumberish];
      export type OutputTuple = [groupId: bigint, index: bigint, identityCommitment: bigint, merkleTreeRoot: bigint];
      export interface OutputObject {groupId: bigint, index: bigint, identityCommitment: bigint, merkleTreeRoot: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace MemberRemovedEvent {
      export type InputTuple = [groupId: BigNumberish, index: BigNumberish, identityCommitment: BigNumberish, merkleTreeRoot: BigNumberish];
      export type OutputTuple = [groupId: bigint, index: bigint, identityCommitment: bigint, merkleTreeRoot: bigint];
      export interface OutputObject {groupId: bigint, index: bigint, identityCommitment: bigint, merkleTreeRoot: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace MemberUpdatedEvent {
      export type InputTuple = [groupId: BigNumberish, index: BigNumberish, identityCommitment: BigNumberish, newIdentityCommitment: BigNumberish, merkleTreeRoot: BigNumberish];
      export type OutputTuple = [groupId: bigint, index: bigint, identityCommitment: bigint, newIdentityCommitment: bigint, merkleTreeRoot: bigint];
      export interface OutputObject {groupId: bigint, index: bigint, identityCommitment: bigint, newIdentityCommitment: bigint, merkleTreeRoot: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace MembersAddedEvent {
      export type InputTuple = [groupId: BigNumberish, startIndex: BigNumberish, identityCommitments: BigNumberish[], merkleTreeRoot: BigNumberish];
      export type OutputTuple = [groupId: bigint, startIndex: bigint, identityCommitments: bigint[], merkleTreeRoot: bigint];
      export interface OutputObject {groupId: bigint, startIndex: bigint, identityCommitments: bigint[], merkleTreeRoot: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ProofValidatedEvent {
      export type InputTuple = [groupId: BigNumberish, merkleTreeDepth: BigNumberish, merkleTreeRoot: BigNumberish, nullifier: BigNumberish, message: BigNumberish, scope: BigNumberish, points: BigNumberish[]];
      export type OutputTuple = [groupId: bigint, merkleTreeDepth: bigint, merkleTreeRoot: bigint, nullifier: bigint, message: bigint, scope: bigint, points: bigint[]];
      export interface OutputObject {groupId: bigint, merkleTreeDepth: bigint, merkleTreeRoot: bigint, nullifier: bigint, message: bigint, scope: bigint, points: bigint[] };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface Semaphore extends BaseContract {
    
    connect(runner?: ContractRunner | null): Semaphore;
    waitForDeployment(): Promise<this>;

    interface: SemaphoreInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    acceptGroupAdmin: TypedContractMethod<
      [groupId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    addMember: TypedContractMethod<
      [groupId: BigNumberish, identityCommitment: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    addMembers: TypedContractMethod<
      [groupId: BigNumberish, identityCommitments: BigNumberish[], ],
      [void],
      'nonpayable'
    >
    

    
    "createGroup(address,uint256)": TypedContractMethod<
      [admin: AddressLike, merkleTreeDuration: BigNumberish, ],
      [bigint],
      'nonpayable'
    >
    

    
    "createGroup()": TypedContractMethod<
      [],
      [bigint],
      'nonpayable'
    >
    

    
    "createGroup(address)": TypedContractMethod<
      [admin: AddressLike, ],
      [bigint],
      'nonpayable'
    >
    

    
    getGroupAdmin: TypedContractMethod<
      [groupId: BigNumberish, ],
      [string],
      'view'
    >
    

    
    getMerkleTreeDepth: TypedContractMethod<
      [groupId: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    getMerkleTreeRoot: TypedContractMethod<
      [groupId: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    getMerkleTreeSize: TypedContractMethod<
      [groupId: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    groupCounter: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    groups: TypedContractMethod<
      [arg0: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    hasMember: TypedContractMethod<
      [groupId: BigNumberish, identityCommitment: BigNumberish, ],
      [boolean],
      'view'
    >
    

    
    indexOf: TypedContractMethod<
      [groupId: BigNumberish, identityCommitment: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    removeMember: TypedContractMethod<
      [groupId: BigNumberish, identityCommitment: BigNumberish, merkleProofSiblings: BigNumberish[], ],
      [void],
      'nonpayable'
    >
    

    
    updateGroupAdmin: TypedContractMethod<
      [groupId: BigNumberish, newAdmin: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    updateGroupMerkleTreeDuration: TypedContractMethod<
      [groupId: BigNumberish, newMerkleTreeDuration: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    updateMember: TypedContractMethod<
      [groupId: BigNumberish, identityCommitment: BigNumberish, newIdentityCommitment: BigNumberish, merkleProofSiblings: BigNumberish[], ],
      [void],
      'nonpayable'
    >
    

    
    validateProof: TypedContractMethod<
      [groupId: BigNumberish, proof: ISemaphore.SemaphoreProofStruct, ],
      [void],
      'nonpayable'
    >
    

    
    verifier: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    verifyProof: TypedContractMethod<
      [groupId: BigNumberish, proof: ISemaphore.SemaphoreProofStruct, ],
      [boolean],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'acceptGroupAdmin'): TypedContractMethod<
      [groupId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'addMember'): TypedContractMethod<
      [groupId: BigNumberish, identityCommitment: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'addMembers'): TypedContractMethod<
      [groupId: BigNumberish, identityCommitments: BigNumberish[], ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'createGroup(address,uint256)'): TypedContractMethod<
      [admin: AddressLike, merkleTreeDuration: BigNumberish, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'createGroup()'): TypedContractMethod<
      [],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'createGroup(address)'): TypedContractMethod<
      [admin: AddressLike, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getGroupAdmin'): TypedContractMethod<
      [groupId: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getMerkleTreeDepth'): TypedContractMethod<
      [groupId: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getMerkleTreeRoot'): TypedContractMethod<
      [groupId: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getMerkleTreeSize'): TypedContractMethod<
      [groupId: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'groupCounter'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'groups'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'hasMember'): TypedContractMethod<
      [groupId: BigNumberish, identityCommitment: BigNumberish, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'indexOf'): TypedContractMethod<
      [groupId: BigNumberish, identityCommitment: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'removeMember'): TypedContractMethod<
      [groupId: BigNumberish, identityCommitment: BigNumberish, merkleProofSiblings: BigNumberish[], ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'updateGroupAdmin'): TypedContractMethod<
      [groupId: BigNumberish, newAdmin: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'updateGroupMerkleTreeDuration'): TypedContractMethod<
      [groupId: BigNumberish, newMerkleTreeDuration: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'updateMember'): TypedContractMethod<
      [groupId: BigNumberish, identityCommitment: BigNumberish, newIdentityCommitment: BigNumberish, merkleProofSiblings: BigNumberish[], ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'validateProof'): TypedContractMethod<
      [groupId: BigNumberish, proof: ISemaphore.SemaphoreProofStruct, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'verifier'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'verifyProof'): TypedContractMethod<
      [groupId: BigNumberish, proof: ISemaphore.SemaphoreProofStruct, ],
      [boolean],
      'view'
    >;

    getEvent(key: 'GroupAdminPending'): TypedContractEvent<GroupAdminPendingEvent.InputTuple, GroupAdminPendingEvent.OutputTuple, GroupAdminPendingEvent.OutputObject>;
getEvent(key: 'GroupAdminUpdated'): TypedContractEvent<GroupAdminUpdatedEvent.InputTuple, GroupAdminUpdatedEvent.OutputTuple, GroupAdminUpdatedEvent.OutputObject>;
getEvent(key: 'GroupCreated'): TypedContractEvent<GroupCreatedEvent.InputTuple, GroupCreatedEvent.OutputTuple, GroupCreatedEvent.OutputObject>;
getEvent(key: 'GroupMerkleTreeDurationUpdated'): TypedContractEvent<GroupMerkleTreeDurationUpdatedEvent.InputTuple, GroupMerkleTreeDurationUpdatedEvent.OutputTuple, GroupMerkleTreeDurationUpdatedEvent.OutputObject>;
getEvent(key: 'MemberAdded'): TypedContractEvent<MemberAddedEvent.InputTuple, MemberAddedEvent.OutputTuple, MemberAddedEvent.OutputObject>;
getEvent(key: 'MemberRemoved'): TypedContractEvent<MemberRemovedEvent.InputTuple, MemberRemovedEvent.OutputTuple, MemberRemovedEvent.OutputObject>;
getEvent(key: 'MemberUpdated'): TypedContractEvent<MemberUpdatedEvent.InputTuple, MemberUpdatedEvent.OutputTuple, MemberUpdatedEvent.OutputObject>;
getEvent(key: 'MembersAdded'): TypedContractEvent<MembersAddedEvent.InputTuple, MembersAddedEvent.OutputTuple, MembersAddedEvent.OutputObject>;
getEvent(key: 'ProofValidated'): TypedContractEvent<ProofValidatedEvent.InputTuple, ProofValidatedEvent.OutputTuple, ProofValidatedEvent.OutputObject>;

    filters: {
      
      'GroupAdminPending(uint256,address,address)': TypedContractEvent<GroupAdminPendingEvent.InputTuple, GroupAdminPendingEvent.OutputTuple, GroupAdminPendingEvent.OutputObject>;
      GroupAdminPending: TypedContractEvent<GroupAdminPendingEvent.InputTuple, GroupAdminPendingEvent.OutputTuple, GroupAdminPendingEvent.OutputObject>;
    

      'GroupAdminUpdated(uint256,address,address)': TypedContractEvent<GroupAdminUpdatedEvent.InputTuple, GroupAdminUpdatedEvent.OutputTuple, GroupAdminUpdatedEvent.OutputObject>;
      GroupAdminUpdated: TypedContractEvent<GroupAdminUpdatedEvent.InputTuple, GroupAdminUpdatedEvent.OutputTuple, GroupAdminUpdatedEvent.OutputObject>;
    

      'GroupCreated(uint256)': TypedContractEvent<GroupCreatedEvent.InputTuple, GroupCreatedEvent.OutputTuple, GroupCreatedEvent.OutputObject>;
      GroupCreated: TypedContractEvent<GroupCreatedEvent.InputTuple, GroupCreatedEvent.OutputTuple, GroupCreatedEvent.OutputObject>;
    

      'GroupMerkleTreeDurationUpdated(uint256,uint256,uint256)': TypedContractEvent<GroupMerkleTreeDurationUpdatedEvent.InputTuple, GroupMerkleTreeDurationUpdatedEvent.OutputTuple, GroupMerkleTreeDurationUpdatedEvent.OutputObject>;
      GroupMerkleTreeDurationUpdated: TypedContractEvent<GroupMerkleTreeDurationUpdatedEvent.InputTuple, GroupMerkleTreeDurationUpdatedEvent.OutputTuple, GroupMerkleTreeDurationUpdatedEvent.OutputObject>;
    

      'MemberAdded(uint256,uint256,uint256,uint256)': TypedContractEvent<MemberAddedEvent.InputTuple, MemberAddedEvent.OutputTuple, MemberAddedEvent.OutputObject>;
      MemberAdded: TypedContractEvent<MemberAddedEvent.InputTuple, MemberAddedEvent.OutputTuple, MemberAddedEvent.OutputObject>;
    

      'MemberRemoved(uint256,uint256,uint256,uint256)': TypedContractEvent<MemberRemovedEvent.InputTuple, MemberRemovedEvent.OutputTuple, MemberRemovedEvent.OutputObject>;
      MemberRemoved: TypedContractEvent<MemberRemovedEvent.InputTuple, MemberRemovedEvent.OutputTuple, MemberRemovedEvent.OutputObject>;
    

      'MemberUpdated(uint256,uint256,uint256,uint256,uint256)': TypedContractEvent<MemberUpdatedEvent.InputTuple, MemberUpdatedEvent.OutputTuple, MemberUpdatedEvent.OutputObject>;
      MemberUpdated: TypedContractEvent<MemberUpdatedEvent.InputTuple, MemberUpdatedEvent.OutputTuple, MemberUpdatedEvent.OutputObject>;
    

      'MembersAdded(uint256,uint256,uint256[],uint256)': TypedContractEvent<MembersAddedEvent.InputTuple, MembersAddedEvent.OutputTuple, MembersAddedEvent.OutputObject>;
      MembersAdded: TypedContractEvent<MembersAddedEvent.InputTuple, MembersAddedEvent.OutputTuple, MembersAddedEvent.OutputObject>;
    

      'ProofValidated(uint256,uint256,uint256,uint256,uint256,uint256,uint256[8])': TypedContractEvent<ProofValidatedEvent.InputTuple, ProofValidatedEvent.OutputTuple, ProofValidatedEvent.OutputObject>;
      ProofValidated: TypedContractEvent<ProofValidatedEvent.InputTuple, ProofValidatedEvent.OutputTuple, ProofValidatedEvent.OutputObject>;
    
    };
  }