/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface MyHTSTokenInterface extends Interface {
    getFunction(nameOrSignature: "burnNFT" | "createNFTCollection" | "mintNFT(address)" | "mintNFT(address,bytes)" | "name" | "owner" | "redirectForToken" | "renounceOwnership" | "symbol" | "tokenAddress" | "transferFrom" | "transferFromNFT" | "transferOwnership" | "withdrawHBAR"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "CallResponseEvent" | "HBARFallback" | "HBARReceived" | "HBARWithdrawn" | "NFTBurned" | "NFTCollectionCreated" | "NFTMinted" | "OwnershipTransferred"): EventFragment;

    encodeFunctionData(functionFragment: 'burnNFT', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'createNFTCollection', values: [string, string]): string;
encodeFunctionData(functionFragment: 'mintNFT(address)', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'mintNFT(address,bytes)', values: [AddressLike, BytesLike]): string;
encodeFunctionData(functionFragment: 'name', values?: undefined): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'redirectForToken', values: [AddressLike, BytesLike]): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
encodeFunctionData(functionFragment: 'tokenAddress', values?: undefined): string;
encodeFunctionData(functionFragment: 'transferFrom', values: [AddressLike, AddressLike, AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'transferFromNFT', values: [AddressLike, AddressLike, AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'withdrawHBAR', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'burnNFT', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'createNFTCollection', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'mintNFT(address)', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'mintNFT(address,bytes)', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'redirectForToken', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'tokenAddress', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferFromNFT', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdrawHBAR', data: BytesLike): Result;
  }

  
    export namespace CallResponseEventEvent {
      export type InputTuple = [arg0: boolean, arg1: BytesLike];
      export type OutputTuple = [arg0: boolean, arg1: string];
      export interface OutputObject {arg0: boolean, arg1: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace HBARFallbackEvent {
      export type InputTuple = [sender: AddressLike, amount: BigNumberish, data: BytesLike];
      export type OutputTuple = [sender: string, amount: bigint, data: string];
      export interface OutputObject {sender: string, amount: bigint, data: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace HBARReceivedEvent {
      export type InputTuple = [from: AddressLike, amount: BigNumberish];
      export type OutputTuple = [from: string, amount: bigint];
      export interface OutputObject {from: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace HBARWithdrawnEvent {
      export type InputTuple = [to: AddressLike, amount: BigNumberish];
      export type OutputTuple = [to: string, amount: bigint];
      export interface OutputObject {to: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace NFTBurnedEvent {
      export type InputTuple = [tokenId: BigNumberish, newTotalSupply: BigNumberish];
      export type OutputTuple = [tokenId: bigint, newTotalSupply: bigint];
      export interface OutputObject {tokenId: bigint, newTotalSupply: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace NFTCollectionCreatedEvent {
      export type InputTuple = [token: AddressLike];
      export type OutputTuple = [token: string];
      export interface OutputObject {token: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace NFTMintedEvent {
      export type InputTuple = [to: AddressLike, tokenId: BigNumberish, newTotalSupply: BigNumberish];
      export type OutputTuple = [to: string, tokenId: bigint, newTotalSupply: bigint];
      export interface OutputObject {to: string, tokenId: bigint, newTotalSupply: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface MyHTSToken extends BaseContract {
    
    connect(runner?: ContractRunner | null): MyHTSToken;
    waitForDeployment(): Promise<this>;

    interface: MyHTSTokenInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    burnNFT: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    createNFTCollection: TypedContractMethod<
      [_name: string, _symbol: string, ],
      [void],
      'payable'
    >
    

    
    "mintNFT(address)": TypedContractMethod<
      [to: AddressLike, ],
      [bigint],
      'nonpayable'
    >
    

    
    "mintNFT(address,bytes)": TypedContractMethod<
      [to: AddressLike, metadata: BytesLike, ],
      [bigint],
      'nonpayable'
    >
    

    
    name: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    redirectForToken: TypedContractMethod<
      [token: AddressLike, encodedFunctionSelector: BytesLike, ],
      [[bigint, string] & {responseCode: bigint, response: string }],
      'nonpayable'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    symbol: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    tokenAddress: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    transferFrom: TypedContractMethod<
      [token: AddressLike, from: AddressLike, to: AddressLike, amount: BigNumberish, ],
      [bigint],
      'nonpayable'
    >
    

    
    transferFromNFT: TypedContractMethod<
      [token: AddressLike, from: AddressLike, to: AddressLike, serialNumber: BigNumberish, ],
      [bigint],
      'nonpayable'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    withdrawHBAR: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'burnNFT'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'createNFTCollection'): TypedContractMethod<
      [_name: string, _symbol: string, ],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'mintNFT(address)'): TypedContractMethod<
      [to: AddressLike, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'mintNFT(address,bytes)'): TypedContractMethod<
      [to: AddressLike, metadata: BytesLike, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'name'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'redirectForToken'): TypedContractMethod<
      [token: AddressLike, encodedFunctionSelector: BytesLike, ],
      [[bigint, string] & {responseCode: bigint, response: string }],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'symbol'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'tokenAddress'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'transferFrom'): TypedContractMethod<
      [token: AddressLike, from: AddressLike, to: AddressLike, amount: BigNumberish, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferFromNFT'): TypedContractMethod<
      [token: AddressLike, from: AddressLike, to: AddressLike, serialNumber: BigNumberish, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'withdrawHBAR'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'CallResponseEvent'): TypedContractEvent<CallResponseEventEvent.InputTuple, CallResponseEventEvent.OutputTuple, CallResponseEventEvent.OutputObject>;
getEvent(key: 'HBARFallback'): TypedContractEvent<HBARFallbackEvent.InputTuple, HBARFallbackEvent.OutputTuple, HBARFallbackEvent.OutputObject>;
getEvent(key: 'HBARReceived'): TypedContractEvent<HBARReceivedEvent.InputTuple, HBARReceivedEvent.OutputTuple, HBARReceivedEvent.OutputObject>;
getEvent(key: 'HBARWithdrawn'): TypedContractEvent<HBARWithdrawnEvent.InputTuple, HBARWithdrawnEvent.OutputTuple, HBARWithdrawnEvent.OutputObject>;
getEvent(key: 'NFTBurned'): TypedContractEvent<NFTBurnedEvent.InputTuple, NFTBurnedEvent.OutputTuple, NFTBurnedEvent.OutputObject>;
getEvent(key: 'NFTCollectionCreated'): TypedContractEvent<NFTCollectionCreatedEvent.InputTuple, NFTCollectionCreatedEvent.OutputTuple, NFTCollectionCreatedEvent.OutputObject>;
getEvent(key: 'NFTMinted'): TypedContractEvent<NFTMintedEvent.InputTuple, NFTMintedEvent.OutputTuple, NFTMintedEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;

    filters: {
      
      'CallResponseEvent(bool,bytes)': TypedContractEvent<CallResponseEventEvent.InputTuple, CallResponseEventEvent.OutputTuple, CallResponseEventEvent.OutputObject>;
      CallResponseEvent: TypedContractEvent<CallResponseEventEvent.InputTuple, CallResponseEventEvent.OutputTuple, CallResponseEventEvent.OutputObject>;
    

      'HBARFallback(address,uint256,bytes)': TypedContractEvent<HBARFallbackEvent.InputTuple, HBARFallbackEvent.OutputTuple, HBARFallbackEvent.OutputObject>;
      HBARFallback: TypedContractEvent<HBARFallbackEvent.InputTuple, HBARFallbackEvent.OutputTuple, HBARFallbackEvent.OutputObject>;
    

      'HBARReceived(address,uint256)': TypedContractEvent<HBARReceivedEvent.InputTuple, HBARReceivedEvent.OutputTuple, HBARReceivedEvent.OutputObject>;
      HBARReceived: TypedContractEvent<HBARReceivedEvent.InputTuple, HBARReceivedEvent.OutputTuple, HBARReceivedEvent.OutputObject>;
    

      'HBARWithdrawn(address,uint256)': TypedContractEvent<HBARWithdrawnEvent.InputTuple, HBARWithdrawnEvent.OutputTuple, HBARWithdrawnEvent.OutputObject>;
      HBARWithdrawn: TypedContractEvent<HBARWithdrawnEvent.InputTuple, HBARWithdrawnEvent.OutputTuple, HBARWithdrawnEvent.OutputObject>;
    

      'NFTBurned(uint256,int64)': TypedContractEvent<NFTBurnedEvent.InputTuple, NFTBurnedEvent.OutputTuple, NFTBurnedEvent.OutputObject>;
      NFTBurned: TypedContractEvent<NFTBurnedEvent.InputTuple, NFTBurnedEvent.OutputTuple, NFTBurnedEvent.OutputObject>;
    

      'NFTCollectionCreated(address)': TypedContractEvent<NFTCollectionCreatedEvent.InputTuple, NFTCollectionCreatedEvent.OutputTuple, NFTCollectionCreatedEvent.OutputObject>;
      NFTCollectionCreated: TypedContractEvent<NFTCollectionCreatedEvent.InputTuple, NFTCollectionCreatedEvent.OutputTuple, NFTCollectionCreatedEvent.OutputObject>;
    

      'NFTMinted(address,uint256,int64)': TypedContractEvent<NFTMintedEvent.InputTuple, NFTMintedEvent.OutputTuple, NFTMintedEvent.OutputObject>;
      NFTMinted: TypedContractEvent<NFTMintedEvent.InputTuple, NFTMintedEvent.OutputTuple, NFTMintedEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    
    };
  }