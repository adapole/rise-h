/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  
export declare namespace CicadaVote {
      
    export type PublicParametersStruct = {N: [BigNumberish, BigNumberish, BigNumberish, BigNumberish], T: BigNumberish, g: [BigNumberish, BigNumberish, BigNumberish, BigNumberish], h: [BigNumberish, BigNumberish, BigNumberish, BigNumberish], y: [BigNumberish, BigNumberish, BigNumberish, BigNumberish], yInv: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]}

    export type PublicParametersStructOutput = [N: [bigint, bigint, bigint, bigint], T: bigint, g: [bigint, bigint, bigint, bigint], h: [bigint, bigint, bigint, bigint], y: [bigint, bigint, bigint, bigint], yInv: [bigint, bigint, bigint, bigint]] & {N: [bigint, bigint, bigint, bigint], T: bigint, g: [bigint, bigint, bigint, bigint], h: [bigint, bigint, bigint, bigint], y: [bigint, bigint, bigint, bigint], yInv: [bigint, bigint, bigint, bigint] }
  

    export type PuzzleStruct = {u: [BigNumberish, BigNumberish, BigNumberish, BigNumberish], v: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]}

    export type PuzzleStructOutput = [u: [bigint, bigint, bigint, bigint], v: [bigint, bigint, bigint, bigint]] & {u: [bigint, bigint, bigint, bigint], v: [bigint, bigint, bigint, bigint] }
  
    }

  export interface CicadaVoteInterface extends Interface {
    getFunction(nameOrSignature: "nextVoteId" | "votes"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "VoteCreated" | "VoteFinalized"): EventFragment;

    encodeFunctionData(functionFragment: 'nextVoteId', values?: undefined): string;
encodeFunctionData(functionFragment: 'votes', values: [BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'nextVoteId', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'votes', data: BytesLike): Result;
  }

  
    export namespace VoteCreatedEvent {
      export type InputTuple = [voteId: BigNumberish, description: string, startTime: BigNumberish, endTime: BigNumberish, pp: CicadaVote.PublicParametersStruct];
      export type OutputTuple = [voteId: bigint, description: string, startTime: bigint, endTime: bigint, pp: CicadaVote.PublicParametersStructOutput];
      export interface OutputObject {voteId: bigint, description: string, startTime: bigint, endTime: bigint, pp: CicadaVote.PublicParametersStructOutput };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace VoteFinalizedEvent {
      export type InputTuple = [voteId: BigNumberish, numYesVotes: BigNumberish, numNoVotes: BigNumberish];
      export type OutputTuple = [voteId: bigint, numYesVotes: bigint, numNoVotes: bigint];
      export interface OutputObject {voteId: bigint, numYesVotes: bigint, numNoVotes: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface CicadaVote extends BaseContract {
    
    connect(runner?: ContractRunner | null): CicadaVote;
    waitForDeployment(): Promise<this>;

    interface: CicadaVoteInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    nextVoteId: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    votes: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, CicadaVote.PuzzleStructOutput, bigint, bigint, bigint, boolean] & {parametersHash: string, tally: CicadaVote.PuzzleStructOutput, numVotes: bigint, startTime: bigint, endTime: bigint, isFinalized: boolean }],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'nextVoteId'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'votes'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, CicadaVote.PuzzleStructOutput, bigint, bigint, bigint, boolean] & {parametersHash: string, tally: CicadaVote.PuzzleStructOutput, numVotes: bigint, startTime: bigint, endTime: bigint, isFinalized: boolean }],
      'view'
    >;

    getEvent(key: 'VoteCreated'): TypedContractEvent<VoteCreatedEvent.InputTuple, VoteCreatedEvent.OutputTuple, VoteCreatedEvent.OutputObject>;
getEvent(key: 'VoteFinalized'): TypedContractEvent<VoteFinalizedEvent.InputTuple, VoteFinalizedEvent.OutputTuple, VoteFinalizedEvent.OutputObject>;

    filters: {
      
      'VoteCreated(uint256,string,uint64,uint64,tuple)': TypedContractEvent<VoteCreatedEvent.InputTuple, VoteCreatedEvent.OutputTuple, VoteCreatedEvent.OutputObject>;
      VoteCreated: TypedContractEvent<VoteCreatedEvent.InputTuple, VoteCreatedEvent.OutputTuple, VoteCreatedEvent.OutputObject>;
    

      'VoteFinalized(uint256,uint64,uint64)': TypedContractEvent<VoteFinalizedEvent.InputTuple, VoteFinalizedEvent.OutputTuple, VoteFinalizedEvent.OutputObject>;
      VoteFinalized: TypedContractEvent<VoteFinalizedEvent.InputTuple, VoteFinalizedEvent.OutputTuple, VoteFinalizedEvent.OutputObject>;
    
    };
  }