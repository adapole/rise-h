/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  
export declare namespace CicadaVote {
      
    export type PublicParametersStruct = {N: [BigNumberish, BigNumberish, BigNumberish, BigNumberish], T: BigNumberish, g: [BigNumberish, BigNumberish, BigNumberish, BigNumberish], h: [BigNumberish, BigNumberish, BigNumberish, BigNumberish], y: [BigNumberish, BigNumberish, BigNumberish, BigNumberish], yInv: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]}

    export type PublicParametersStructOutput = [N: [bigint, bigint, bigint, bigint], T: bigint, g: [bigint, bigint, bigint, bigint], h: [bigint, bigint, bigint, bigint], y: [bigint, bigint, bigint, bigint], yInv: [bigint, bigint, bigint, bigint]] & {N: [bigint, bigint, bigint, bigint], T: bigint, g: [bigint, bigint, bigint, bigint], h: [bigint, bigint, bigint, bigint], y: [bigint, bigint, bigint, bigint], yInv: [bigint, bigint, bigint, bigint] }
  

    export type PuzzleStruct = {u: [BigNumberish, BigNumberish, BigNumberish, BigNumberish], v: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]}

    export type PuzzleStructOutput = [u: [bigint, bigint, bigint, bigint], v: [bigint, bigint, bigint, bigint]] & {u: [bigint, bigint, bigint, bigint], v: [bigint, bigint, bigint, bigint] }
  
    }

export declare namespace ISemaphore {
      
    export type SemaphoreProofStruct = {merkleTreeDepth: BigNumberish, merkleTreeRoot: BigNumberish, nullifier: BigNumberish, message: BigNumberish, scope: BigNumberish, points: BigNumberish[]}

    export type SemaphoreProofStructOutput = [merkleTreeDepth: bigint, merkleTreeRoot: bigint, nullifier: bigint, message: bigint, scope: bigint, points: bigint[]] & {merkleTreeDepth: bigint, merkleTreeRoot: bigint, nullifier: bigint, message: bigint, scope: bigint, points: bigint[] }
  
    }

  export interface SemaphoreCicadaInterface extends Interface {
    getFunction(nameOrSignature: "ballots" | "ballotsCount" | "canFinalize" | "executeResult" | "finalizeTally" | "finalized" | "groupId" | "nextVoteId" | "nullifierUsed" | "semaphore" | "submitVote" | "timelockDelaySeconds" | "totalNo" | "totalYes" | "votes" | "votingEndTime"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "BallotSubmitted" | "TallyFinalized" | "VoteCreated" | "VoteFinalized" | "VotingExecuted"): EventFragment;

    encodeFunctionData(functionFragment: 'ballots', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'ballotsCount', values?: undefined): string;
encodeFunctionData(functionFragment: 'canFinalize', values?: undefined): string;
encodeFunctionData(functionFragment: 'executeResult', values?: undefined): string;
encodeFunctionData(functionFragment: 'finalizeTally', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'finalized', values?: undefined): string;
encodeFunctionData(functionFragment: 'groupId', values?: undefined): string;
encodeFunctionData(functionFragment: 'nextVoteId', values?: undefined): string;
encodeFunctionData(functionFragment: 'nullifierUsed', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'semaphore', values?: undefined): string;
encodeFunctionData(functionFragment: 'submitVote', values: [ISemaphore.SemaphoreProofStruct, BytesLike]): string;
encodeFunctionData(functionFragment: 'timelockDelaySeconds', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalNo', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalYes', values?: undefined): string;
encodeFunctionData(functionFragment: 'votes', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'votingEndTime', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'ballots', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'ballotsCount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'canFinalize', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'executeResult', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'finalizeTally', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'finalized', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'groupId', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'nextVoteId', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'nullifierUsed', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'semaphore', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'submitVote', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'timelockDelaySeconds', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalNo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalYes', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'votes', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'votingEndTime', data: BytesLike): Result;
  }

  
    export namespace BallotSubmittedEvent {
      export type InputTuple = [nullifier: BigNumberish, ciphertext: BytesLike];
      export type OutputTuple = [nullifier: bigint, ciphertext: string];
      export interface OutputObject {nullifier: bigint, ciphertext: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TallyFinalizedEvent {
      export type InputTuple = [yes: BigNumberish, no: BigNumberish];
      export type OutputTuple = [yes: bigint, no: bigint];
      export interface OutputObject {yes: bigint, no: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace VoteCreatedEvent {
      export type InputTuple = [voteId: BigNumberish, description: string, startTime: BigNumberish, endTime: BigNumberish, pp: CicadaVote.PublicParametersStruct];
      export type OutputTuple = [voteId: bigint, description: string, startTime: bigint, endTime: bigint, pp: CicadaVote.PublicParametersStructOutput];
      export interface OutputObject {voteId: bigint, description: string, startTime: bigint, endTime: bigint, pp: CicadaVote.PublicParametersStructOutput };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace VoteFinalizedEvent {
      export type InputTuple = [voteId: BigNumberish, numYesVotes: BigNumberish, numNoVotes: BigNumberish];
      export type OutputTuple = [voteId: bigint, numYesVotes: bigint, numNoVotes: bigint];
      export interface OutputObject {voteId: bigint, numYesVotes: bigint, numNoVotes: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace VotingExecutedEvent {
      export type InputTuple = [];
      export type OutputTuple = [];
      export interface OutputObject {};
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface SemaphoreCicada extends BaseContract {
    
    connect(runner?: ContractRunner | null): SemaphoreCicada;
    waitForDeployment(): Promise<this>;

    interface: SemaphoreCicadaInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    ballots: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, bigint] & {ciphertext: string, nullifier: bigint }],
      'view'
    >
    

    
    ballotsCount: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    canFinalize: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    

    
    executeResult: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    finalizeTally: TypedContractMethod<
      [yes: BigNumberish, no: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    finalized: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    

    
    groupId: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    nextVoteId: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    nullifierUsed: TypedContractMethod<
      [arg0: BigNumberish, ],
      [boolean],
      'view'
    >
    

    
    semaphore: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    submitVote: TypedContractMethod<
      [proof: ISemaphore.SemaphoreProofStruct, encryptedBallot: BytesLike, ],
      [void],
      'nonpayable'
    >
    

    
    timelockDelaySeconds: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    totalNo: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    totalYes: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    votes: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, CicadaVote.PuzzleStructOutput, bigint, bigint, bigint, boolean] & {parametersHash: string, tally: CicadaVote.PuzzleStructOutput, numVotes: bigint, startTime: bigint, endTime: bigint, isFinalized: boolean }],
      'view'
    >
    

    
    votingEndTime: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'ballots'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, bigint] & {ciphertext: string, nullifier: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'ballotsCount'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'canFinalize'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'executeResult'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'finalizeTally'): TypedContractMethod<
      [yes: BigNumberish, no: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'finalized'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'groupId'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'nextVoteId'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'nullifierUsed'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'semaphore'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'submitVote'): TypedContractMethod<
      [proof: ISemaphore.SemaphoreProofStruct, encryptedBallot: BytesLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'timelockDelaySeconds'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'totalNo'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'totalYes'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'votes'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, CicadaVote.PuzzleStructOutput, bigint, bigint, bigint, boolean] & {parametersHash: string, tally: CicadaVote.PuzzleStructOutput, numVotes: bigint, startTime: bigint, endTime: bigint, isFinalized: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 'votingEndTime'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;

    getEvent(key: 'BallotSubmitted'): TypedContractEvent<BallotSubmittedEvent.InputTuple, BallotSubmittedEvent.OutputTuple, BallotSubmittedEvent.OutputObject>;
getEvent(key: 'TallyFinalized'): TypedContractEvent<TallyFinalizedEvent.InputTuple, TallyFinalizedEvent.OutputTuple, TallyFinalizedEvent.OutputObject>;
getEvent(key: 'VoteCreated'): TypedContractEvent<VoteCreatedEvent.InputTuple, VoteCreatedEvent.OutputTuple, VoteCreatedEvent.OutputObject>;
getEvent(key: 'VoteFinalized'): TypedContractEvent<VoteFinalizedEvent.InputTuple, VoteFinalizedEvent.OutputTuple, VoteFinalizedEvent.OutputObject>;
getEvent(key: 'VotingExecuted'): TypedContractEvent<VotingExecutedEvent.InputTuple, VotingExecutedEvent.OutputTuple, VotingExecutedEvent.OutputObject>;

    filters: {
      
      'BallotSubmitted(uint256,bytes)': TypedContractEvent<BallotSubmittedEvent.InputTuple, BallotSubmittedEvent.OutputTuple, BallotSubmittedEvent.OutputObject>;
      BallotSubmitted: TypedContractEvent<BallotSubmittedEvent.InputTuple, BallotSubmittedEvent.OutputTuple, BallotSubmittedEvent.OutputObject>;
    

      'TallyFinalized(uint256,uint256)': TypedContractEvent<TallyFinalizedEvent.InputTuple, TallyFinalizedEvent.OutputTuple, TallyFinalizedEvent.OutputObject>;
      TallyFinalized: TypedContractEvent<TallyFinalizedEvent.InputTuple, TallyFinalizedEvent.OutputTuple, TallyFinalizedEvent.OutputObject>;
    

      'VoteCreated(uint256,string,uint64,uint64,tuple)': TypedContractEvent<VoteCreatedEvent.InputTuple, VoteCreatedEvent.OutputTuple, VoteCreatedEvent.OutputObject>;
      VoteCreated: TypedContractEvent<VoteCreatedEvent.InputTuple, VoteCreatedEvent.OutputTuple, VoteCreatedEvent.OutputObject>;
    

      'VoteFinalized(uint256,uint64,uint64)': TypedContractEvent<VoteFinalizedEvent.InputTuple, VoteFinalizedEvent.OutputTuple, VoteFinalizedEvent.OutputObject>;
      VoteFinalized: TypedContractEvent<VoteFinalizedEvent.InputTuple, VoteFinalizedEvent.OutputTuple, VoteFinalizedEvent.OutputObject>;
    

      'VotingExecuted()': TypedContractEvent<VotingExecutedEvent.InputTuple, VotingExecutedEvent.OutputTuple, VotingExecutedEvent.OutputObject>;
      VotingExecuted: TypedContractEvent<VotingExecutedEvent.InputTuple, VotingExecutedEvent.OutputTuple, VotingExecutedEvent.OutputObject>;
    
    };
  }