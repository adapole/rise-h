/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */


import { ethers } from 'ethers'
import { DeployContractOptions, FactoryOptions, HardhatEthersHelpers as HardhatEthersHelpersBase} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from "./index.js";

declare module "@nomicfoundation/hardhat-ethers/types" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
  getContractFactory(name: 'CicadaVote', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.CicadaVote__factory>
getContractFactory(name: 'Feedback', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.Feedback__factory>
getContractFactory(name: 'LibPrime', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.LibPrime__factory>
getContractFactory(name: 'LibUint1024', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.LibUint1024__factory>
getContractFactory(name: 'IHederaTokenService', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IHederaTokenService__factory>
getContractFactory(name: 'IPoSQLVerifier', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IPoSQLVerifier__factory>
getContractFactory(name: 'MintController', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.MintController__factory>
getContractFactory(name: 'MyHTSToken', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.MyHTSToken__factory>
getContractFactory(name: 'SemaphoreCicada', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.SemaphoreCicada__factory>
getContractFactory(name: 'TokenManager', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.TokenManager__factory>

  getContractAt(name: 'CicadaVote', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.CicadaVote>
getContractAt(name: 'Feedback', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.Feedback>
getContractAt(name: 'LibPrime', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.LibPrime>
getContractAt(name: 'LibUint1024', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.LibUint1024>
getContractAt(name: 'IHederaTokenService', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IHederaTokenService>
getContractAt(name: 'IPoSQLVerifier', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IPoSQLVerifier>
getContractAt(name: 'MintController', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.MintController>
getContractAt(name: 'MyHTSToken', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.MyHTSToken>
getContractAt(name: 'SemaphoreCicada', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.SemaphoreCicada>
getContractAt(name: 'TokenManager', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.TokenManager>

  deployContract(name: 'CicadaVote', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.CicadaVote>
deployContract(name: 'Feedback', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.Feedback>
deployContract(name: 'LibPrime', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.LibPrime>
deployContract(name: 'LibUint1024', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.LibUint1024>
deployContract(name: 'IHederaTokenService', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IHederaTokenService>
deployContract(name: 'IPoSQLVerifier', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IPoSQLVerifier>
deployContract(name: 'MintController', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MintController>
deployContract(name: 'MyHTSToken', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MyHTSToken>
deployContract(name: 'SemaphoreCicada', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.SemaphoreCicada>
deployContract(name: 'TokenManager', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.TokenManager>

  deployContract(name: 'CicadaVote', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.CicadaVote>
deployContract(name: 'Feedback', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.Feedback>
deployContract(name: 'LibPrime', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.LibPrime>
deployContract(name: 'LibUint1024', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.LibUint1024>
deployContract(name: 'IHederaTokenService', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IHederaTokenService>
deployContract(name: 'IPoSQLVerifier', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IPoSQLVerifier>
deployContract(name: 'MintController', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MintController>
deployContract(name: 'MyHTSToken', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MyHTSToken>
deployContract(name: 'SemaphoreCicada', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.SemaphoreCicada>
deployContract(name: 'TokenManager', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.TokenManager>

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
  